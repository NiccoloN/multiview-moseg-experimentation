% -------------------------------------------------------------------------
% Generation of sequence-dependent error graphs to compare different frame
% gaps
% -------------------------------------------------------------------------
% This function reads FG_Pars generated by framegap_check() and returns six
% plots, one for each method, with the sequence-error diagram for every
% frame_gap considered
% ------------------------------------------------------------------------- 
% The required parameter is:
% FG_Pars: struct containing seq_range, max_hypos, alpha_range,
% lambda_range, gamma_range, frame_gap, run_range, Error_matrix,
% best_lambda, best_gamma, best_alphas
% 
% Warning: alpha_range, lambda_range, gamma_range must be the same ranges
% used to generate both the results and the Error_matrix
% Warning: sel_lambda and sel_gamma have to be elements of lambda_range and
% gamma_range, respectively

function best_seq_graph(FG_Pars)

    methods = {'Affine', 'Homography', 'Fundamental', 'KerAdd', 'CoReg', 'Subset'};
    colors = colormap(figure('Visible', 'off'), lines(length(methods)));

    % Open a new figure
    fig = figure;

    % Get the default width and height of the figure in pixels
    normalWidth = 560; % Default width of a figure in pixels
    normalHeight = 420; % Default height of a figure in pixels

    % Get the screen size
    screenSize = get(0, 'ScreenSize');

    % Calculate the center position for the figure window
    centerX = (screenSize(3) - 3*normalWidth) / 2;
    centerY = (screenSize(4) - normalHeight) / 2;

    % Set the figure's position and size
    set(fig, 'Position', [centerX, centerY, 3*normalWidth, normalHeight]);

    % Plot the graphs
    hold on

    for fg_ind = 1:length(FG_Pars)

        sel_lambda_ind = find(FG_Pars(fg_ind).lambda_range == FG_Pars(fg_ind).best_lambda);
        sel_gamma_ind = find(FG_Pars(fg_ind).gamma_range == FG_Pars(fg_ind).best_gamma);
    
        Averaged_matrix = mean(FG_Pars(fg_ind).Error_matrix, 1);
        sequences = FG_Pars(fg_ind).seq_range;
        legend_labels{fg_ind} = sprintf('Frame gap %d', fg_ind);

        % title_extensions(i) = {'', '', '', '', strcat(fprintf('for lambda%d = ', i), num2str(FG_Pars(i).best_lambda)),...
        %     strcat(fprintf('for gamma%d = ', i), num2str(FG_Pars(i).best_gamma))};

        y_max = max(max(Averaged_matrix, [], 'all'));

        for method_ind = 1:length(methods)
            subplot(2, length(methods)/2, method_ind);
            ylim([0, 100*y_max]);
            hold on
            grid on
            title(sprintf('%s Performances', methods{method_ind}));

            sel_alpha_ind = find(FG_Pars(fg_ind).alpha_range == FG_Pars(fg_ind).best_alphas(method_ind));
            Averaged_matrix_fixed = squeeze(Averaged_matrix(1, method_ind, FG_Pars(fg_ind).seq_range, ...
                sel_alpha_ind, sel_lambda_ind, sel_gamma_ind));
            plot(sequences, 100*Averaged_matrix_fixed,'Color',colors(fg_ind, :),'Marker','+');
                
            xlabel('sequences');
            ylabel('error (%)');

            legend(legend_labels);
        end
    end    
end