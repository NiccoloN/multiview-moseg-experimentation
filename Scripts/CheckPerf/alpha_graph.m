% -------------------------------------------------------------------------
% Generation of alpha-dependent error graphs, averaged for all sequences
% -------------------------------------------------------------------------
% This function reads the error matrix generated by error_analisys() and
% creates graphs of the errors for each method, showing the average value
% for all sequences and the median value.
% For CoReg and Subset, a specific value of lambda and gamma parameters has
% to be chosen
% 
% The required parameters are:
% Error_matrix: the error matrix generated by error_analisys()
% alpha_range: array of values of alpha
% lambda_range: array of values of lambda
% gamma_range: array of values of gamma
% sel_lambda: chosen lambda parameter
% sel_gamma: chosen gamma parameter
% 
% Warning: alpha_range, lambda_range, gamma_range must be the same ranges
% used to generate both the results and the Error_matrix
% Warning: sel_lambda and sel_gamma have to be elements of lambda_range and
% gamma_range, respectively

function min_alphas = alpha_graph(Error_matrix, alpha_range, lambda_range, gamma_range, sel_lambda, sel_gamma, seq_range, run_parameters)

    methods = {'Affine', 'Homography', 'Fundamental', 'KerAdd', 'CoReg', 'Subset'};
    title_extensions = {'', '', '', '', strcat(', for lambda = ', num2str(sel_lambda)), strcat(', for gamma = ', num2str(sel_gamma))};
    colors = colormap(figure('Visible', 'off'), hsv(3));
    
    min_alphas = zeros(1,length(methods));
    sel_lambda_ind = find(lambda_range == sel_lambda);
    sel_gamma_ind = find(gamma_range == sel_gamma);

    Error_matrix = Error_matrix(:, :, seq_range, :, :, :);
    Averaged_matrix = mean(Error_matrix, [1 3]);
    Median_matrix = median(mean(Error_matrix, 1), 3);
    Std_dev_matrix = std(Error_matrix, 0, 3);

    y_max = max([max(Averaged_matrix, [], 'all'), max(Median_matrix, [], 'all')]);

    % Open a new figure
    fig = figure;
    
    % Get the default width and height of the figure in pixels
    normalWidth = 560; % Default width of a figure in pixels
    normalHeight = 317; % Default height of a figure in pixels
    
    % Calculate the new width and height
    newWidth = normalWidth * 2;
    newHeight = normalHeight * 2;
    
    % Get the screen size
    screenSize = get(0, 'ScreenSize');
    
    % Calculate the center position for the figure window
    centerX = (screenSize(3) - newWidth) / 2;
    centerY = (screenSize(4) - newHeight) / 2;
    
    % Set the figure's position and size to be centered and twice as big
    set(fig, 'Position', [centerX, centerY, newWidth, newHeight]);
    
    % Plot the graphs
    hold on
    for method_ind = 1:length(methods)
        subplot(2, length(methods)/2, method_ind);
        ylim([0, 100*y_max]);
        set(gca, "FontSize", 14)
        hold on
        grid on

        title(strcat(methods{method_ind}, ' Performances', title_extensions{method_ind}));

        Averaged_matrix_fixed = squeeze(Averaged_matrix(1, method_ind, 1, :, sel_lambda_ind, sel_gamma_ind));
        % [~, min_alpha_index] = min(Averaged_matrix_fixed);
        % min_alphas(method_ind) = alpha_range(min_alpha_index);
        plot(alpha_range, 100*Averaged_matrix_fixed,'Color',colors(1,:),'Marker','+');

        Median_matrix_fixed = squeeze(Median_matrix(1, method_ind, 1, :, sel_lambda_ind, sel_gamma_ind));
        [~, min_alpha_index] = min(Median_matrix_fixed);
        min_alphas(method_ind) = alpha_range(min_alpha_index);
        plot(alpha_range, 100*Median_matrix_fixed,'Color',colors(2,:),'Marker','+');

        % Std_dev_matrix_fixed = squeeze(Std_dev_matrix(1, method_ind, 1, :, sel_lambda_ind, sel_gamma_ind));
        % plot(alpha_range, 100*Std_dev_matrix_fixed,'Color',colors(3,:),'Marker','+');

        xlabel('alpha');
        ylabel('error (%)');
    end
    legend('Mean', 'Median', 'Standard deviation');
    % sgtitle(sprintf('Alpha performances on %s dataset\nOrk computed with %s philosophy and %s method\nClustering performed with %s\nAffinities between point computed considering the %d contiguous frames', run_parameters.sel_dataset, run_parameters.ork_philosophy, run_parameters.ork_method, run_parameters.clustering_method, run_parameters.frame_gap_range))
    sg = sgtitle(sprintf('Dataset: %s\nORK %s evaluated using %s method\nClustering: %s\nFrame gap: up to %d frames', run_parameters.sel_dataset, run_parameters.ork_philosophy, run_parameters.ork_method, run_parameters.clustering_method, run_parameters.frame_gap_range));
    sg.FontSize = 20; 
end